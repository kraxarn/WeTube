@{
	ViewData["Title"] = "View Room";
	ViewData["Page"]  = "roomView";
}

<div id="container">
	<div id="video" class="dropShadow">
		<div id="noVideo">
			<h3>Queue's empty!</h3>
			Add new videos to the queue by searching for them below.
		</div>
	</div>
	<div id="videoControls" class="dropShadow">
		<div id="roomTitle">
			Room Name - Video Name
		</div>
		<div id="videoSize" onclick="toggleVideoSize()">
			Size: <span id="videoSizeString">540</span>p
			<div id="videoSizeDropdown">
				<span>Auto</span>
				<span onclick="setVideoSize(960, 540)">540p</span>
				<span onclick="setVideoSize(1280, 720)">720p</span>
				<span onclick="setVideoSize(1920, 1080)">1080p</span>
			</div>
		</div>
	</div>
	<div id="content">
		<div id="search" class="dropShadow">
			<input id="videoSearch" type="text" placeholder="Search">
			<div id="searchResults"></div>
		</div>
		<div id="commentsQueue">
			<div id="comments" class="dropShadow">
				<div id="commentsContainer">
					<table>
						<tr>
							<td><img src="/img/icon/status.png" /></td>
							<td colspan="2">User1 joined the room</td>
						</tr>
						<tr>
							<td><img src="/img/icon/status.png" /></td>
							<td colspan="2">User2 joined the room</td>
						</tr>
						<tr>
							<td><img src="/img/icon/message.png" /></td>
							<td class="userTitle">User1:</td>
							<td>How exciting! Some sample text.</td>
						</tr>
						<tr>
							<td><img src="/img/icon/message.png" /></td>
							<td class="userTitle">User2:</td>
							<td>I know right? It even wraps quite nicely when typing long messages.</td>
						</tr>
						<tr>
							<td><img src="/img/icon/playback.png" /></td>
							<td colspan="2">User1 started playback</td>
						</tr>
					</table>
				</div>
				<input id="commentEntry" type="text" placeholder="Comment">
			</div>
			<div id="queue" class="dropShadow">
				<span class="message">
					Queue is currently empty.
				</span>
			</div>
		</div>
	</div>
</div>

<script>
	window.videoSearch.addEventListener("input", () =>
	{
		// Get search query
		const query = window.videoSearch.value

		// Check is search is too short
		if (query.length < 3) {
			resetSearchResults()
			return
		}

		// Search
		search(query, callback =>
		{
			resetSearchResults()
			callback.forEach(item =>
			{
				addSearchResult(item.thumbnail, item.title, item.description)
			})
		})
	})
	
	function search(query, callback)
	{
		fetch(`/api/search/?q=${query}`)
			.then(response =>
			{
				return response.json()
			})
			.then(json =>
			{
				if (json.error) {
					callback(null)
				} else {
					callback(json.message)
				}
			})
	}

	function addSearchResult(thumbnailSrc, titleText, descriptionText)
	{
		if (!thumbnailSrc || !titleText || !descriptionText) {
			console.log("Warning: One or more values missing, not adding result")
			return
		}

		// Main search result
		const searchResult = document.createElement("div")
		searchResult.className = "searchResult"

		// Search info
		const searchInfo = document.createElement("div")
		searchInfo.className = "searchInfo"
		searchResult.appendChild(searchInfo)

		// Search info: Thumbnail
		const thumbnail = document.createElement("img")
		thumbnail.className = "searchThumbnail"
		thumbnail.src = thumbnailSrc
		searchInfo.appendChild(thumbnail)

		// Search info: Title
		const title = document.createElement("h5")
		if (titleText.length > 60) {
			titleText = titleText.subString(0, 60) + "..."
		}
		title.textContent = titleText
		searchInfo.appendChild(title)

		// Search info: Description
		const description = document.createElement("p")
		description.textContent = descriptionText
		searchInfo.appendChild(description)

		// Add queue container
		const queue = document.createElement("div")
		queue.className = "addQueueContainer"
		searchResult.appendChild(queue)

		// Add queue container: Img
		const queueImg = document.createElement("img")
		queueImg.src = "/img/icon/addQueue.png"
		queue.appendChild(queueImg)

		// Add queue container: Span
		const queueTxt = document.createElement("span")
		queueTxt.textContent = "Add to Queue"
		queue.appendChild(queueTxt)

		// Add result to results
		searchResults.appendChild(searchResult)
	}

	function resetSearchResults()
	{
		const results = window.searchResults
		while (results.firstChild) {
			results.removeChild(results.firstChild)
		}
	}

	function toggleVideoSize()
	{
		const dropdown = window.videoSizeDropdown
		const visible = dropdown.style.visibility === "visible" ? true : false

		dropdown.style.visibility = visible ? "hidden" : "visible"
	}

	function setVideoSize(width, height)
	{
		console.log("Size: %sx%s", width, height)

		window.video.style.width  = width + "px"
		window.video.style.height = height + "px"

		window.videoSizeString.textContent = height
	}
</script>

<!-- Socket.IO 2.1.0 -->
<script src="/js/socket.io.slim.js"></script>
<script>

	const username = @Model.Name

	// TODO: Auto get IP
	const socket = io("ws://localhost:3000")
	socket.on("connect", () =>
	{
		console.log("Connected to chat")
		// TODO: Send username and room to server
		socket.emit("join",
			{
				username: "username",
				room: "room"
			})
	})
	socket.on("event", data =>
	{
		console.log("Event")
	})
	socket.on("disconnect", () =>
	{
		console.log("Disconnect from chat")
	})
	socket.on("connect_error", error =>
	{
		console.log("Connection error")
	})
	socket.on("message", data =>
	{
		console.log(data)
	})
</script>